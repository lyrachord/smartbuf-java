package com.github.sisyphsu.canoe.transport;

import com.github.sisyphsu.canoe.exception.InvalidReadException;
import com.github.sisyphsu.canoe.exception.InvalidVersionException;
import com.github.sisyphsu.canoe.exception.MismatchModeException;
import com.github.sisyphsu.canoe.exception.UnexpectedSequenceException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.github.sisyphsu.canoe.transport.Const.*;

/**
 * Input accepts and maintains context info that generated by {@link Output},
 * and use it to parse input object one by one.
 *
 * @author sulin
 * @since 2019-10-10 21:43:41
 */
public final class Input {

    private long sequence;

    private final boolean     stream;
    private final InputBuffer buffer = new InputBuffer();

    private final InputDataPool dataPool = new InputDataPool();
    private final InputMetaPool metaPool = new InputMetaPool();

    /**
     * Initialize input
     *
     * @param enableStreamMode If enable stream-mode, if not, enable packet-mode
     */
    public Input(boolean enableStreamMode) {
        this.stream = enableStreamMode;
    }

    /**
     * Read the next Object from the underlying buffer.
     *
     * @return The next object
     * @throws IOException If any io-error happens
     */
    public Object read() throws IOException {
        byte head = buffer.readByte();
        boolean stream = (head & VER_STREAM) != 0;
        boolean hasMeta = (head & VER_HAS_DATA) != 0;
        boolean hasData = (head & VER_HAS_META) != 0;
        boolean hasSeq = (head & VER_HAS_SEQ) != 0;
        // valid schema
        if ((head & 0b1111_0000) != VER) {
            throw new InvalidVersionException(head & 0b1111_0000);
        }
        if (stream != this.stream) {
            throw new MismatchModeException(stream);
        }
        // only stream-mode needs sequence
        if (hasSeq) {
            long nextSeq = this.sequence + 1;
            long seq = buffer.readByte();
            if ((seq & 0xFF) != (nextSeq & 0xFF)) {
                throw new UnexpectedSequenceException(seq & 0xFF, (int) (nextSeq & 0xFF));
            }
            this.sequence = nextSeq;
        }
        // read temporary metadata
        if (hasMeta) {
            metaPool.read(buffer);
        }
        // read context metadata
        if (hasData) {
            dataPool.read(buffer);
        }
        // load data
        return readObject();
    }

    /**
     * Read the next node, it could be normal data, array, or struct.
     */
    Object readObject() throws IOException {
        long head = buffer.readVarUint();
        switch ((int) head) {
            case ID_NULL:
                return null;
            case ID_TRUE:
                return true;
            case ID_FALSE:
                return false;
            case ID_ZERO_ARRAY:
                return new Object[0];
        }
        byte flag = (byte) (head & 0b0000_0011);
        int dataId = (int) (head >>> 3);
        switch (flag) {
            case DATA_FLAG_VARINT:
                return dataPool.getVarint(dataId);
            case DATA_FLAG_FLOAT:
                return dataPool.getFloat(dataId);
            case DATA_FLAG_DOUBLE:
                return dataPool.getDouble(dataId);
            case DATA_FLAG_STRING:
                return dataPool.getString(dataId);
            case DATA_FLAG_SYMBOL:
                return dataPool.getSymbol(dataId);
            case DATA_FLAG_OBJECT:
                String[] fields = metaPool.findStructByID(dataId);
                Map<String, Object> map = new HashMap<>();
                for (String field : fields) {
                    map.put(field, readObject());
                }
                return map;
            case DATA_FLAG_NARRAY:
                return readNArray(head);
            case DATA_FLAG_ARRAY:
                return this.readArray(head);
            default:
                throw new InvalidReadException("run into invalid data flag: " + flag);
        }
    }

    /**
     * Read an native array, like byte[] int[]
     */
    Object readNArray(long head) throws IOException {
        byte type = (byte) (head & 0b0011_1111);
        int size = (int) (head >>> 6);
        switch (type) {
            case NARRAY_BOOL:
                return buffer.readBooleanArray(size);
            case NARRAY_BYTE:
                return buffer.readByteArray(size);
            case NARRAY_SHORT:
                return buffer.readShortArray(size);
            case NARRAY_INT:
                return buffer.readIntArray(size);
            case NARRAY_LONG:
                return buffer.readLongArray(size);
            case NARRAY_FLOAT:
                return buffer.readFloatArray(size);
            case NARRAY_DOUBLE:
                return buffer.readDoubleArray(size);
            default:
                throw new IllegalArgumentException("unknown narray type");
        }
    }

    /**
     * Read an array by the specified head info
     */
    Object readArray(long head) throws IOException {
        List<Object[]> slices = new ArrayList<>();
        int totalSize = 0;
        while (true) {
            byte type = (byte) ((head >>> 1) & 0x0F);
            int size = (int) (head >>> 5);
            totalSize += size;
            Object[] slice;
            switch (type) {
                case SLICE_BOOL:
                    slice = buffer.readBooleanSlice(size);
                    break;
                case SLICE_BYTE:
                    slice = buffer.readByteSlice(size);
                    break;
                case SLICE_SHORT:
                    slice = buffer.readShortSlice(size);
                    break;
                case SLICE_INT:
                    slice = buffer.readIntSlice(size);
                    break;
                case SLICE_LONG:
                    slice = buffer.readLongSlice(size);
                    break;
                case SLICE_FLOAT:
                    slice = buffer.readFloatSlice(size);
                    break;
                case SLICE_DOUBLE:
                    slice = buffer.readDoubleSlice(size);
                    break;
                case SLICE_NULL:
                    slice = new Object[size];
                    break;
                case SLICE_SYMBOL:
                    slice = new String[size];
                    for (int i = 0; i < size; i++) {
                        int dataId = (int) buffer.readVarUint();
                        slice[i] = stream ? dataPool.getSymbol(dataId) : dataPool.getString(dataId);
                    }
                    break;
                case SLICE_STRING:
                    slice = new String[size];
                    for (int i = 0; i < size; i++) {
                        slice[i] = dataPool.getString((int) buffer.readVarUint());
                    }
                    break;
//                case SLICE_ARRAY:
//                    slice = new Object[size];
//                    for (int i = 0; i < size; i++) {
//                        slice[i] = readArray(buffer.readVarUint());
//                    }
//                    break;
//                case SLICE_OBJECT:
//                    slice = new Object[size];
//                    int structId = (int) buffer.readVarUint();
//                    String[] fieldNames = context.findStructByID(structId);
//                    for (int i = 0; i < size; i++) {
//                        Map<String, Object> obj = new HashMap<>();
//                        for (String field : fieldNames) {
//                            obj.put(field, readNode());
//                        }
//                        slice[i] = obj;
//                    }
//                    break;
                default:
                    throw new InvalidReadException("run into invalid slice type: " + type);
            }
            slices.add(slice);
            if ((head & 1) == 0) {
                break;
            }
            head = buffer.readVarUint();
        }
        Object[] result = new Object[totalSize];
        int off = 0;
        for (Object[] slice : slices) {
            for (Object o : slice) {
                result[off++] = o;
            }
        }
        return result;
    }

}
